### Find All Content Local hardcoded Variable DB
GET http://localhost:8080/api/content HTTP/1.1

### Find Content By Id
GET http://localhost:8080/api/content/2 HTTP/1.1

### Add New Content
POST http://localhost:8080/api/content HTTP/1.1
content-type: application/json

{
  "id": 5,
  "title": "",
  "description": "My first blog post",
  "status": "IDEA",
  "contentType": "ARTICLE",
  "dateCreated": "2024-04-29T16:10:57.1576915",
  "dateUpdated": null,
  "url": ""
}

### Updating Existing Content
PUT http://localhost:8080/api/content/1 HTTP/1.1
content-type: application/json

{
  "id": 1,
  "title": "My Firstee Updated Blog Post",
  "description": "My firstee updated blog post",
  "status": "IDEA",
  "contentType": "ARTICLE",
  "dateCreated": "2024-04-29T16:10:57.1576915",
  "dateUpdated": null,
  "url": ""
}

### Delete Existing Content
DELETE http://localhost:8080/api/content/1 HTTP/1.1


### Find All Content In Local h2 Locally Connected DB Using JDBC
GET http://localhost:8080/api/content/jdbc HTTP/1.1


### Find A Specific Content In Local h2 Locally Connected DB Using JDBC
GET http://localhost:8080/api/content/jdbc/2 HTTP/1.1


### Add New Content In Local H2 Locally Using JDBC
POST http://localhost:8080/api/content/jdbc HTTP/1.1
content-type: application/json

{
  "title": "My Firstee added Blog Post",
  "description": "My firstee added blog post",
  "status": "IDEA",
  "contentType": "ARTICLE",
  "dateCreated": null,
  "dateUpdated": null,
  "url": null
}


### Delete Existing Content In Local H2 Using JDBC
DELETE http://localhost:8080/api/content/jdbc/1 HTTP/1.1


### Add New Content In Local H2 Locally Using JDBC
PUT http://localhost:8080/api/content/jdbc/update HTTP/1.1
content-type: application/json

{
  "id": 2,
  "title": "My Firstee Updateded Blog Post",
  "description": "My firstee updateded blog post",
  "status": "IDEA",
  "contentType": "ARTICLE",
  "dateUpdated": null,
  "url": null
}

### Find All Content in DB using Spring Data
GET http://localhost:8080/api/content/springData HTTP/1.1

### Find Content By Id in DB using Spring Data
GET http://localhost:8080/api/content/springData/2 HTTP/1.1

### Add New Content in DB using Spring Data
POST http://localhost:8080/api/content/springData HTTP/1.1
content-type: application/json

{
  "title": "testo",
  "description": "My first blog post",
  "status": "IDEA",
  "contentType": "ARTICLE",
  "dateCreated": "2024-04-29T16:10:57.1576915",
  "dateUpdated": null,
  "url": ""
}

### Updating Existing Content in DB using Spring Data
PUT http://localhost:8080/api/content/springData/1 HTTP/1.1
content-type: application/json

{
  "id": 1,
  "title": "My Firstee Updated Blog Post",
  "description": "My firstee updated blog post",
  "status": "IDEA",
  "contentType": "ARTICLE",
  "dateCreated": "2024-04-29T16:10:57.1576915",
  "dateUpdated": null,
  "url": ""
}

### Delete Existing Content in DB using Spring Data
DELETE http://localhost:8080/api/content/springData/2 HTTP/1.1